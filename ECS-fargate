This Terraform script does the following:

*  Creates a VPC with two public subnets in different availability zones.
*  Creates an ECS cluster.
*  Creates an IAM role and policy for ECS tasks, allowing specific ECS actions.
*  Attaches the IAM policy to the IAM role.
*  Defines an ECS task definition with your container image and configuration.
*  Creates an ECS service that runs the task using Fargate launch type in the specified subnets and security group.


# Define your provider configuration for AWS
provider "aws" {
  region = "us-east-1" # Change to your desired AWS region
}

# Create a VPC
resource "aws_vpc" "ecs_vpc" {
  cidr_block = "10.0.0.0/16"
}

# Create two public subnets
resource "aws_subnet" "public_subnet" {
  count                   = 2
  vpc_id                  = aws_vpc.ecs_vpc.id
  cidr_block              = element(["10.0.1.0/24", "10.0.2.0/24"], count.index)
  availability_zone       = element(["us-east-1a", "us-east-1b"], count.index)
  map_public_ip_on_launch = true
}

# Create an ECS cluster
resource "aws_ecs_cluster" "my_cluster" {
  name = "my-ecs-cluster"
}

# Create an IAM role for ECS tasks (assuming you want to attach policies later)
resource "aws_iam_role" "ecs_task_role" {
  name = "ecs-task-role"
}

# Create an IAM policy for ECS tasks (adjust as needed)
resource "aws_iam_policy" "ecs_task_policy" {
  name        = "ecs-task-policy"
  description = "ECS Task Role Policy"
  
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = [
          "ecs:ListTasks",
          "ecs:DescribeTasks",
          "ecs:StopTask",
        ],
        Effect   = "Allow",
        Resource = "*",
      },
    ],
  })
}

# Attach the IAM policy to the IAM role
resource "aws_iam_role_policy_attachment" "ecs_task_policy_attachment" {
  policy_arn = aws_iam_policy.ecs_task_policy.arn
  role       = aws_iam_role.ecs_task_role.name
}

# Create an ECS task definition (replace with your container details)
resource "aws_ecs_task_definition" "my_task_definition" {
  family                   = "my-task-family"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  execution_role_arn       = aws_iam_role.ecs_task_role.arn

  container_definitions = jsonencode([{
    name  = "my-container-name",
    image = "nginx:latest", # Replace with your container image
    portMappings = [{
      containerPort = 80,
      hostPort      = 80,
    }],
  }])
}

# Create an ECS service
resource "aws_ecs_service" "my_service" {
  name            = "my-ecs-service"
  cluster         = aws_ecs_cluster.my_cluster.id
  task_definition = aws_ecs_task_definition.my_task_definition.arn
  launch_type     = "FARGATE"
  desired_count   = 1

  network_configuration {
    subnets = aws_subnet.public_subnet[*].id
    security_groups = [aws_security_group.my_security_group.id]
  }
}
